// 콜백 함수를 전달해 줘야 하지만 배열 메서드는 아닌 함수
// 실행을 연기, 대기, 중단, 추후 날짜로 실행을 연기 or 기본적으로 작업 일정을 정함

//============================= setTimeout =====================================
// setTimeout에 전달해야 할 것
// 1. 콜백
// 2. 그 함수의 실행을 연기시킬 시간인 밀리 초의 숫자

// 3초 후 HELLO!! 출력 시키기 
// JS가 브라우저가 적절한 시간까지 기다렸다가 여기 쓰이는 함수를 호출
//================================================
// setTimeout(() => {
//    console.log('HELLO!!');
// }, 3000)
//================================================

console.log('HELLO..');
setTimeout(() => {
   console.log("It's me..")
}, 3000)
console.log('GOODDBYE!');

//============================= setInterval =====================================
// 전달할 함수를 호출하는데 콜백을 매 특정 밀리 초 마다 호출하는 함수 
// 인터벌을 두고 작업 * 반복 *

//================================================
// setInterval(() => {
//    console.log(Math.random())
// }, 2000)
//================================================

//============================== clearInterval ==============================================
// setInterval을 멈추기 
// setInterval의 반환값을 저장
// 호출할 때마다 이 함수는 설정해놓은 인터벌에 해당하는 ID를 반환함
// -> 서로 다른 인터벌로 실행되는 다양한 setInterval 함수를 여러개 호출 가능
// 이 ID를 통해 중단하고 싶은 함수 지정 가능

const id = setInterval(() => {
   console.log(Math.random())
}, 2000)

// clearInterval(id)